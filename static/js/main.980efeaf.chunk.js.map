{"version":3,"sources":["CreateSharedElements.js","Header.js","InputFeedback.js","CreateName.js","Enroll.js","EnrolledList.js","firebase.js","CreateEntry.js","UpdateEntry.js","StatsExpandedEnrolled.js","StatsEnrolled.js","StatsExpandedClasses.js","StatsClasses.js","Stats.js","App.js","serviceWorker.js","index.js"],"names":["CreateSharedElements","handleEnroll","event","preventDefault","enrolledCopy","Object","toConsumableArray","_this","state","enrolled","exec","currentClass","length","includes","push","setState","inputErrorID","enrollError","errorMessage","handleDeleteEnroll","index","newState","filter","i","handleSubmit","handleChange","defineProperty","target","name","value","Component","Header","props","react_default","a","createElement","className","InputFeedback","react","inputID","nameError","CSSTransition","in","appear","timeout","classNames","numEnrolled","CreateName","htmlFor","type","id","placeholder","values","onChange","changes","src_InputFeedback","Enroll","EnrolledList","anythingEnrolled","TransitionGroup","aria-live","map","key","onClick","handleDelete","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","CreateEntry","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleCreate","dbRef","database","ref","namesEntered","has","Set","_this2","on","data","val","add","src_Header","onSubmit","src_CreateName","bind","src_Enroll","src_EnrolledList","UpdateEntry","handleSearch","once","found","student","tempStudent","currentStudent","inputErrorId","handleUpdate","newEnroll","update","keys","StatsExpandedEnrolled","openEntries","entry","item","StatsEnrolled","openClosedMap","labelMessage","caret","entries","handleClick","concat","src_StatsExpandedEnrolled","StatsExpandedClasses","currentKey","studentsIn","StatClasses","classStudents","src_StatsExpandedClasses","Stats","parseClasses","classList","classEnrollment","theseClasses","thisName","j","hasOwnProperty","classes","tempOpen","numClasses","numStudents","currentEntries","esm","src_StatsEnrolled","StatsClasses","App","document","title","src_CreateEntry","src_UpdateEntry","src_Stats","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.980efeaf.chunk.js","sourcesContent":["import { Component } from \"react\";\r\n\r\n// -----------------------------------------------------------------------------------------------\r\n// ----Class that holds shared methods and functionality for components in create entry tab-------\r\n// ----------------------------------------------------------------------------------------------\r\n\r\nclass CreateSharedElements extends Component {\r\n\r\n    //Enters a class name to state\r\n    handleEnroll = (event) => {\r\n        event.preventDefault();\r\n\r\n        //get a copy of enrolled classes for current student to work on\r\n        const enrolledCopy = [...this.state.enrolled];\r\n\r\n        //regex to check if input is in accepted form - 3 letters 3 numbers\r\n        const pattern = /^([a-z]|[A-Z]){3}[0-9]{3}$/;\r\n\r\n        //only save if something has been entered in the correct format, \r\n        //and there's less than 6 classes currently entered\r\n        if (pattern.exec(this.state.currentClass) && this.state.enrolled.length < 6 && !this.state.enrolled.includes(this.state.currentClass)) {\r\n            enrolledCopy.push(this.state.currentClass);\r\n\r\n            //update state with newly enrolled class\r\n            this.setState({\r\n                enrolled: enrolledCopy,\r\n                //reset currently input class\r\n                currentClass: \"\",\r\n                inputErrorID: -1,\r\n                enrollError: false\r\n            })\r\n        } else if (this.state.enrolled.includes(this.state.currentClass)) {\r\n            //check if it\"s a duplicate class. don't enroll if it is\r\n            this.setState({\r\n                inputErrorID: 1,\r\n                enrollError: true,\r\n                errorMessage: \"Cannot enter a class twice!\"\r\n            });\r\n\r\n        } else {\r\n            //otherwise update state to refresh to show a message to the user about proper input format\r\n            this.setState({\r\n                inputErrorID: 1,\r\n                enrollError: true,\r\n                errorMessage: \"Class names must be of the form (3 letters)(3 numbers)!\"\r\n            });\r\n        }\r\n    }\r\n\r\n    //remove a class we're enrolled in\r\n    handleDeleteEnroll = (index) => {\r\n        //filter out <li> we clicked on\r\n        //save this as a new array\r\n        const newState = this.state.enrolled.filter((currentClass, i) => {\r\n            return i !== index;\r\n        });\r\n        //set new state\r\n        this.setState({\r\n            enrolled: newState\r\n        });\r\n    }\r\n\r\n    //remove default behaviour\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n    }\r\n\r\n    //handles input \r\n    handleChange = (event) => {\r\n        //captures input in input fields to state immediately\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n}\r\n\r\nexport default CreateSharedElements","import React from 'react';\r\n\r\n// ------------------------------------------------------------------\r\n// ---------------------Intro description text section - static------\r\n// ------------------------------------------------------------------\r\n\r\nconst Header = (props) => {\r\n    return(\r\n        <header className=\"intro\">\r\n            <h1>Class Database</h1>\r\n            <p>Enter the name of the student. (Max 25 characters)</p>\r\n            <p>Enroll the classes that they're in. Class names should of the form (3 letters)(3 numbers). Click on an enrolled class to remove it.</p>\r\n            <p>Click Create Entry to save to database.</p>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import React, {Fragment} from \"react\";\r\nimport {CSSTransition} from \"react-transition-group\";\r\n\r\n// ------------------------------------------------------------------\r\n// ----------------Component for error messages shown to user-------\r\n// ------------------------------------------------------------------\r\n\r\nconst InputFeedback = (props) => {\r\n    return(\r\n        <Fragment>\r\n            \r\n                {/* check if it\"s a name error */}\r\n\r\n                { props.inputID === 0 && props.nameError ? \r\n                    \r\n                    <CSSTransition\r\n                        in={props.inputID === 0 && props.nameError}\r\n                        appear={true}\r\n                        timeout={300}\r\n                        classNames=\"fade\"\r\n                    >\r\n                        <div className=\"inputWarning\">\r\n                            <p>{props.errorMessage}</p>\r\n                        </div>\r\n                    </CSSTransition>:\r\n                        \"\"\r\n                }\r\n\r\n                {/* check if it\"s a class enrollment error */}\r\n                { props.inputID === 1 && props.enrollError ? \r\n                    <CSSTransition\r\n                        in={props.inputID === 1 && props.enrollError}\r\n                        appear={true}\r\n                        timeout={300}\r\n                        classNames=\"fade\"\r\n                    >\r\n                        <div className=\"inputWarning\">\r\n                            <p>{props.errorMessage}</p> \r\n                            \r\n                        </div>\r\n                    </CSSTransition>:\r\n                        \"\"\r\n                    \r\n                }\r\n\r\n                {/* check at least 1 class has been enrolled */}\r\n                {props.numEnrolled > 6 || props.numEnrolled < 1 ?\r\n                    <CSSTransition\r\n                        in={props.numEnrolled > 6 || props.numEnrolled < 1}\r\n                        appear={true}\r\n                        timeout={300}\r\n                        classNames=\"fade\"\r\n                    >\r\n                        <div className=\"inputWarning\">\r\n                            <p>You must enroll between 1 and 6 classes!</p>\r\n                        </div>\r\n                    </CSSTransition> :\r\n                        \"\"\r\n                }\r\n            \r\n        </Fragment>\r\n        \r\n    );\r\n}\r\n\r\nexport default InputFeedback;","import React from \"react\";\r\nimport InputFeedback from \"./InputFeedback.js\";\r\n\r\n// -----------------------------------------------------------------------------------\r\n// ---Component for name input on create entry and update sections--------------------\r\n// -----------------------------------------------------------------------------------\r\n\r\nconst CreateName = (props) => {\r\n    \r\n        return(\r\n            <form className=\"nameCreate\">\r\n                <label htmlFor=\"name\">\r\n                    <h4>Enter student name:</h4>\r\n                </label>\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"name\"\r\n                    name=\"name\"\r\n                    placeholder=\"Enter student name\"\r\n                    value={props.values}\r\n                    onChange={props.changes}\r\n                />\r\n                <InputFeedback\r\n                    inputID={props.inputErrorID}\r\n                    nameError={props.nameError}\r\n                    errorMessage={props.errorMessage} \r\n                />\r\n            </form>\r\n        );\r\n}\r\n\r\nexport default CreateName; ","import React from \"react\";\r\nimport InputFeedback from \"./InputFeedback.js\";\r\n\r\n// ---------------------------------------------------------------------------------------\r\n// --component for enroll in class input section on create entry and update sections-------\r\n// --------------------------------------------------------------------------------------\r\n\r\nconst Enroll = (props) => {\r\n    return(\r\n        <form className=\"enrollCreate\" >\r\n            <label htmlFor=\"enroll\">\r\n                <h4>Add a class to enroll:</h4>\r\n            </label>\r\n            <input\r\n                type=\"text\"\r\n                name=\"currentClass\"\r\n                id=\"enroll\"\r\n                placeholder=\"Enter class to enroll\"\r\n                value={props.values}\r\n                onChange={props.changes}\r\n            />\r\n           \r\n            <InputFeedback\r\n                inputID={props.inputErrorID}\r\n                enrollError={props.enrollError}\r\n                errorMessage={props.errorMessage}\r\n            />\r\n            \r\n        \r\n    </form>\r\n    );\r\n}\r\n\r\nexport default Enroll;","import React, {Fragment} from 'react';\r\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\r\nimport InputFeedback from './InputFeedback.js';\r\n\r\n// ---------------------------------------------------------------------------------------\r\n// ---Component for list of clickable enrolled classes in create and update sections-------\r\n// ---------------------------------------------------------------------------------------\r\n\r\nconst EnrolledList = (props) => {\r\n    return(\r\n        <Fragment>\r\n            {props.anythingEnrolled ? <h3>Enrolled Classes:</h3> : <Fragment></Fragment> }\r\n            <InputFeedback\r\n                numEnrolled={props.numEnrolled}\r\n            />\r\n            <TransitionGroup className=\"enrolledList\" aria-live=\"polite\">\r\n                \r\n                {/* iterate over array of enrolled classes */}\r\n                { props.enrolled.map((currentClass, i) => {\r\n                    return (\r\n                        <CSSTransition\r\n                            in={true}\r\n                            appear={true}\r\n                            timeout={600}\r\n                            classNames=\"fade\"\r\n                        >\r\n                            <li key={i} index={i} onClick={() => props.handleDelete(i)} className=\"enrolledLI\">\r\n                                \r\n                                    <button className=\"enrolledListButton\">\r\n                                        {currentClass} \r\n                                        <label className=\"visuallyHidden\">Remove</label>\r\n                                        <i className=\"far fa-times-circle\"></i>\r\n                                    </button>\r\n                                \r\n                            </li>\r\n                        </CSSTransition>\r\n                        );\r\n                        \r\n                    } )\r\n                }\r\n                \r\n            </TransitionGroup>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default EnrolledList;","import firebase from 'firebase';\r\n\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyBvQYeTe9Ji7jAoct7_bwGjVkHrWb7S018\",\r\n    authDomain: \"fir-tutorial-app-f4724.firebaseapp.com\",\r\n    databaseURL: \"https://fir-tutorial-app-f4724.firebaseio.com\",\r\n    projectId: \"fir-tutorial-app-f4724\",\r\n    storageBucket: \"fir-tutorial-app-f4724.appspot.com\",\r\n    messagingSenderId: \"534736022006\",\r\n    appId: \"1:534736022006:web:756caed7a3cd3e41\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import React, {Fragment} from \"react\";\r\nimport CreateSharedElements from \"./CreateSharedElements.js\"\r\nimport Header from \"./Header.js\";\r\nimport CreateName from \"./CreateName.js\";\r\nimport Enroll from \"./Enroll.js\";\r\nimport EnrolledList from \"./EnrolledList\";\r\nimport firebase from \"./firebase.js\";\r\n\r\n// ------------------------------------------------------------------\r\n// ---separate create and update forms to have different state-------\r\n// ------------------------------------------------------------------\r\n\r\nclass CreateEntry extends CreateSharedElements {\r\n    // stores data about a single student in state\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            name: \"\",\r\n            enrolled: [],\r\n            currentClass: \"\",\r\n            inputErrorID: -1,\r\n            nameError: false,\r\n            enrollError: false,\r\n            errorMessage: \"\",\r\n            namesEntered: new Set()\r\n        };\r\n    }\r\n\r\n    //get data from firebase on page load\r\n    componentDidMount() {\r\n        const dbRef = firebase.database().ref();\r\n\r\n        //get data back from firebase\r\n        //listen to and refresh on changes\r\n        //do all the work here to avoid sync conflicts with data coming in\r\n        dbRef.on(\"value\", (data) => {\r\n            //get a list of current names in database to check for duplicates\r\n            let namesEntered = new Set();\r\n            //iterate over entries\r\n            for (let key in data.val()) {\r\n                namesEntered = namesEntered.add(data.val()[key].name);\r\n            }\r\n            //set entered names into state\r\n            this.setState({\r\n                namesEntered: namesEntered\r\n            });\r\n        });\r\n        \r\n    }\r\n\r\n    //handles click of 'create entry' button\r\n    handleCreate = (event) => {\r\n        const dbRef = firebase.database().ref();\r\n\r\n        //only upload if at least 1 class has been enrolled and something is in the name field\r\n        if (this.state.name && this.state.enrolled.length > 0 && !this.state.namesEntered.has(this.state.name)) {\r\n            //upload data stored in current state to firebase\r\n            dbRef.push({\r\n                name: this.state.name,\r\n                enrolled: this.state.enrolled\r\n            });\r\n            //reset state to empty default\r\n            this.setState({\r\n                name: \"\",\r\n                enrolled: [],\r\n                currentClass: \"\",\r\n                inputErrorID: -1,\r\n                nameError: false\r\n            });\r\n        } else if (!this.state.name) {\r\n            //otherwise update state to refresh to show a message to the user to enter a proper name \r\n            this.setState({\r\n                inputErrorID: 0,\r\n                nameError: true,\r\n                errorMessage: \"Enter a name that's between 1 and 25 characters!\"\r\n            });\r\n        } else if (this.state.namesEntered.has(this.state.name)) {\r\n            //if name already exists in database let user know\r\n            this.setState({\r\n                inputErrorID: 0,\r\n                nameError: true,\r\n                errorMessage: \"Student already exists in database!\"\r\n            });\r\n        } else {\r\n            this.setState({\r\n                //if an inproper numer of classes has been entered let user  know\r\n                inputErrorID: 0,\r\n                nameError: true,\r\n                errorMessage: \"You must enroll between 1 and 6 classes!\"\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        // binding event handlers to this component to get form fields resetting on submit\r\n        return(\r\n            <Fragment>\r\n                <div className=\"innerWrapper create\">\r\n                    <Header />\r\n                    {/* put handeSubmit on parent element of forms to prevent default behaviour for both when sumbitted */}\r\n                    <section className=\"createForms\" onSubmit={this.handleSubmit}>\r\n                        <h2>Create Entry</h2>\r\n                        <CreateName\r\n                            changes={this.handleChange.bind(this)}\r\n                            values={this.state.name}\r\n                            inputErrorID={this.state.inputErrorID}\r\n                            nameError={this.state.nameError}\r\n                            errorMessage={this.state.errorMessage}\r\n                        />\r\n                        <Enroll \r\n                            changes={this.handleChange.bind(this)}\r\n                            values={this.state.currentClass}\r\n                            inputErrorID={this.state.inputErrorID}\r\n                            enrollError={this.state.enrollError}\r\n                            errorMessage={this.state.errorMessage}\r\n                        />\r\n                       \r\n                        <button className=\"enrollButton\" onClick={this.handleEnroll.bind(this)}>Enroll</button>\r\n\r\n                        \r\n                        <EnrolledList \r\n                            enrolled={this.state.enrolled}\r\n                            handleDelete={this.handleDeleteEnroll.bind(this)}\r\n                            anythingEnrolled={this.state.enrolled.length > 0}\r\n                            numEnrolled={this.state.enrolled.length}\r\n                        />\r\n                        \r\n                        \r\n                        <button className=\"createButton\" onClick={this.handleCreate.bind(this)}>Create Entry</button>\r\n                    </section>\r\n                </div>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CreateEntry;","import React from \"react\";\r\nimport CreateSharedElements from \"./CreateSharedElements.js\";\r\nimport Enroll from \"./Enroll.js\";\r\nimport EnrolledList from \"./EnrolledList\";\r\nimport InputFeedback from \"./InputFeedback.js\";\r\nimport firebase from \"./firebase.js\";\r\n\r\n// ------------------------------------------------------------------\r\n// --------------------component for update tab----------------------\r\n// ------------------------------------------------------------------\r\n\r\nclass UpdateEntry extends CreateSharedElements {\r\n    \r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            name: \"\",\r\n            enrolled: [],\r\n            currentClass: \"\",\r\n            enrollError: false,\r\n            nameError: false,\r\n            inputErrorID: -1,\r\n            currentStudent: {},\r\n            errorMessage: \"\"\r\n        }\r\n    }\r\n\r\n    handleSearch = () => {\r\n        //reference to our firebase\r\n        const dbRef = firebase.database().ref();\r\n        if (this.state.name) {\r\n            //get snapshot of data in firebase\r\n            //do things in once function to ensure we have the data before working on it\r\n            dbRef.once(\"value\", (data) => {\r\n                //variable to check if we found the entry in database\r\n                let found = false;\r\n                //iterate over the data we got back\r\n                for (let student in data.val()) {\r\n                    //if the entry's name matches the search string\r\n                    if(data.val()[student].name === this.state.name) {\r\n                        //set our state with the entry's enrolled classes and the student object\r\n                        const tempStudent = data.val()[student];\r\n                        tempStudent.key = student;\r\n                        //we've found a match\r\n                        found = true;\r\n                        this.setState({\r\n                            currentStudent: tempStudent,\r\n                            enrolled: data.val()[student].enrolled,\r\n                            inputErrorId: -1,\r\n                            nameError: false\r\n                        });\r\n                    }\r\n                }\r\n                //if we didn\"t find a match reset state\r\n                //show feedback to user\r\n                if (!found) {\r\n                    this.setState({\r\n                        name: \"\",\r\n                        enrolled: [],\r\n                        currentClass: \"\",\r\n                        enrollError: false,\r\n                        nameError: true,\r\n                        inputErrorID: 0,\r\n                        currentStudent: {},\r\n                        errorMessage: \"No matching name found in database!\"\r\n                    });\r\n                }\r\n\r\n               \r\n\r\n            });\r\n        } else {\r\n            //if no input is in search field tell user to enter something\r\n            this.setState({\r\n                inputErrorID: 0,\r\n                nameError: true,\r\n                errorMessage: \"Enter a name that's between 1 and 25 characters!\"\r\n            })\r\n        }\r\n    }\r\n\r\n    //Submits state to update database entry\r\n    handleUpdate = () => {\r\n        //needs to have at least 1 class enrolled\r\n        //enroll function prevents more than 6 classes being entered, so not checking that here\r\n        if (this.state.enrolled.length > 0) {\r\n            //get database reference and update entry with info in state\r\n            const dbRef = firebase.database().ref(this.state.currentStudent.key);\r\n            const newEnroll = {enrolled: this.state.enrolled};\r\n            dbRef.update(newEnroll);\r\n            //reset state\r\n            this.setState ({\r\n                name: \"\",\r\n                enrolled: [],\r\n                currentClass: \"\",\r\n                enrollError: false,\r\n                inputErrorID: -1,\r\n                currentStudent: {}\r\n            });\r\n        } else {\r\n            //if no class is entered show feedback to user to enter a class\r\n            this.setState({\r\n                inputErrorID: -1,\r\n                enrollError: true\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"innerWrapper update\">\r\n                <h2>Update Existing Entries</h2>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <input \r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        id=\"nameSearch\"\r\n                        placeholder=\"Search for student\"\r\n                        value={this.state.name}\r\n                        onChange={this.handleChange}\r\n                    />\r\n                    <InputFeedback\r\n                        inputID={this.state.inputErrorID}\r\n                        nameError={this.state.nameError}\r\n                        errorMessage={this.state.errorMessage}\r\n                    />\r\n                    <button onClick={ this.handleSearch } className=\"searchButton\">Search</button>\r\n                </form>\r\n                \r\n                {/* Check if we\"ve successfully searched for a student */}\r\n                {/* Only display this when we have */}\r\n                { Object.keys(this.state.currentStudent).length >= 1 ?\r\n                    <div aria-live=\"polite\">\r\n                        <h3>Entry for {this.state.currentStudent.name}</h3>\r\n                        <Enroll\r\n                            changes={this.handleChange.bind(this)}\r\n                            values={this.state.currentClass}\r\n                            inputErrorID={this.state.inputErrorID}\r\n                            enrollError={this.state.enrollError}\r\n                        />\r\n                        <button className=\"enrollButton\" onClick={this.handleEnroll.bind(this)}>Enroll</button>\r\n\r\n                        <EnrolledList\r\n                            enrolled={this.state.enrolled}\r\n                            handleDelete={this.handleDeleteEnroll.bind(this)}\r\n                            anythingEnrolled={this.state.enrolled.length > 0}\r\n                            numEnrolled={this.state.enrolled.length}\r\n                        />\r\n                        <button className=\"updateButton\" onClick={this.handleUpdate.bind(this)}>Update Entry</button>\r\n                    </div> :\r\n                    \"\"\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UpdateEntry;","import React from \"react\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\n\r\n// ---------------------------------------------------------------------------\r\n// ---component for expanded list of classes when you click on a student-------\r\n// ----------------------------------------------------------------------------\r\n\r\nconst StatsExpandedEnrolled = (props) => {\r\n    \r\n    return(\r\n        <TransitionGroup className=\"expandedEnrolled\" aria-live=\"polite\">\r\n            {\r\n                props.openEntries.includes(props.i) ?\r\n                props.entry.enrolled.map((item, i) => {\r\n                    return (\r\n                        <CSSTransition\r\n                            in={props.openEntries.includes(props.i)}\r\n                            appear={true}\r\n                            timeout={600}\r\n                            classNames=\"fade\"\r\n                        >\r\n                            <li key={i}>{item}</li>\r\n                        </CSSTransition>\r\n                    )\r\n                }) : \"\"\r\n            }\r\n        </TransitionGroup>\r\n        \r\n        \r\n    );\r\n}\r\n\r\nexport default StatsExpandedEnrolled;","import React, {Fragment} from 'react';\r\nimport StatsExpandedEnrolled from './StatsExpandedEnrolled.js';\r\n\r\n// ------------------------------------------------------------------\r\n// ---------component for student list tab in stats section----------\r\n// ------------------------------------------------------------------\r\n\r\nconst StatsEnrolled = (props) => {\r\n\r\n    //mapping to easily switch caret direction and accessible label description for expand/hide\r\n    const openClosedMap = {\r\n        labelMessage: \"Expand\",\r\n        caret: \"down\"\r\n    };\r\n\r\n    return(\r\n        <ul className=\"expandedList\">\r\n            <h3>Students in the database. Expand to show classes they are enrolled in.</h3>\r\n            {props.entries.map((entry, i) => {\r\n                if (props.openEntries.includes(i)){\r\n                    openClosedMap.labelMessage=\"Close\";\r\n                    openClosedMap.caret=\"up\";\r\n                } \r\n                return (\r\n                    <Fragment key={i}>\r\n                        <li index={i}>\r\n                        <button  onClick={() => props.handleClick(i)}>\r\n                            {entry.name} \r\n                            <label className=\"visuallyHidden\">{openClosedMap.labelMessage}</label>\r\n                            <i className={`fas fa-caret-${openClosedMap.caret}`}></i>\r\n                        </button>\r\n                        </li>\r\n                        \r\n                        <StatsExpandedEnrolled\r\n                            openEntries={props.openEntries}\r\n                            i={i}\r\n                            entry={entry}\r\n                        />\r\n                       \r\n                    </Fragment>\r\n                );\r\n            })}\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default StatsEnrolled;","import React from \"react\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\n\r\n// ------------------------------------------------------------------------------\r\n// -----Component for expanded list of students taking a class----------------\r\n// ------------------------------------------------------------------------------\r\n\r\nconst StatsExpandedClasses = (props) => {\r\n    return(\r\n        \r\n        <TransitionGroup className=\"expandedEnrolled\" aria-live=\"polite\">\r\n            {\r\n                props.openEntries.includes(props.currentKey) ?\r\n                props.studentsIn.map((item, i) => {\r\n                    return (\r\n                        <CSSTransition\r\n                            in={props.openEntries.includes(props.currentKey)}\r\n                            appear={true}\r\n                            timeout={600}\r\n                            classNames=\"fade\"\r\n                        >\r\n                            <li key={i}>{item}</li>\r\n                        </CSSTransition>\r\n                    )\r\n                }) : \"\"\r\n            }\r\n        </TransitionGroup>\r\n        \r\n        \r\n    );\r\n    \r\n}\r\n\r\nexport default StatsExpandedClasses;","import React, {Fragment} from 'react';\r\nimport StatsExpandedClasses from './StatsExpandedClasses'\r\n\r\n// ------------------------------------------------------------------\r\n// -----------------Component for classes tab in stats section-------\r\n// ------------------------------------------------------------------\r\n\r\nconst StatClasses = (props) => {\r\n\r\n    //mapping to easily switch caret icon direction and accessible label description for expand/hide\r\n    const openClosedMap = {\r\n        labelMessage: \"Expand\",\r\n        caret: \"down\"\r\n    };\r\n\r\n    return(\r\n        <Fragment>\r\n            <ul className=\"expandedList\">\r\n            <h3>Classes in the database. Expand to show the students in each class.</h3>\r\n                {Object.keys(props.classStudents).map( (key) => {\r\n                    if (props.openEntries.includes(key)){\r\n                        openClosedMap.labelMessage=\"Close\";\r\n                        openClosedMap.caret=\"up\";\r\n                    }\r\n                    return(\r\n                        <Fragment>\r\n                            <li key={key} index={key}>\r\n                                <button  onClick={() => props.handleClick(key)}>\r\n                                    {key}\r\n                                    <label className=\"visuallyHidden\">{openClosedMap.labelMessage}</label>\r\n                                    <i className={`fas fa-caret-${openClosedMap.caret}`}></i>\r\n                                </button> \r\n                            </li>\r\n                            <StatsExpandedClasses\r\n                                openEntries={props.openEntries}\r\n                                currentKey={key}\r\n                                studentsIn={props.classStudents[key]}\r\n                            />\r\n                        </Fragment>\r\n                    );\r\n                } )}\r\n            </ul>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default StatClasses;","import React, { Component, Fragment } from \"react\";\r\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport StatsEnrolled from \"./StatsEnrolled.js\";\r\nimport StatsClasses from \"./StatsClasses.js\";\r\nimport firebase from \"./firebase.js\";\r\n\r\n// ------------------------------------------------------------------\r\n// ---------------------component for stats tab----------------------\r\n// ------------------------------------------------------------------\r\n\r\nclass Stats extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state ={\r\n            entries: [],\r\n            openEntries: [],\r\n            numClasses: 0,\r\n            classes: [],\r\n            classStudents: {},\r\n            numStudents: 0,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const dbRef = firebase.database().ref();\r\n\r\n        //get data back from firebase and store in state\r\n        //listen to and refresh on changes\r\n        //do all the work here to avoid sync conflicts with data coming in\r\n        dbRef.on(\"value\", (data) => {\r\n            const currentEntries = [];\r\n            for (let key in data.val()) {\r\n                currentEntries.push({\r\n                    name: data.val()[key].name,\r\n                    enrolled: data.val()[key].enrolled\r\n                })\r\n            }\r\n            \r\n            //\r\n            this.parseClasses(currentEntries);\r\n\r\n            this.setState({\r\n                numStudents: currentEntries.length,\r\n                entries: currentEntries\r\n            });\r\n\r\n\r\n        });\r\n    }\r\n\r\n    //argument: array of objects that match database structure: {name: 'string', enrolled: []}\r\n    //sets a list of all classes to state\r\n    //sets an object with structure {class: [list of students taking class]} to state\r\n    parseClasses = (entries) => {\r\n        const classList = [];\r\n        const classEnrollment = {};\r\n\r\n        //iterate over array of objects\r\n        for(let i = 0; i < entries.length; i++) {\r\n\r\n            const theseClasses = entries[i].enrolled;\r\n            const thisName = entries[i].name;\r\n\r\n            //iterate over array of enrolled classes for this object\r\n            for (let j = 0; j < theseClasses.length; j++) {\r\n                if( !classList.includes(theseClasses[j]) ) {\r\n                    //if we haven't seen this class yet push it to array\r\n                    classList.push(theseClasses[j]);\r\n                }\r\n\r\n                if(!classEnrollment.hasOwnProperty(theseClasses[j])) {\r\n                    //if we haven't seen this class yet create the key/value pair with current student's name\r\n                    classEnrollment[theseClasses[j]] = [thisName];\r\n                } else {\r\n                    //if class exists in object keys, push this student's name to its array value\r\n                    classEnrollment[theseClasses[j]].push(thisName);\r\n                }\r\n            }\r\n        }\r\n        //update state\r\n        this.setState({\r\n            classes: classList,\r\n            classStudents: classEnrollment\r\n        })\r\n    }\r\n\r\n    //handles clicks to expand items\r\n    handleClick = (index) => {\r\n        \r\n        let tempOpen = [...this.state.openEntries];\r\n        \r\n        //If clicked index hasn\"t been opened, add it to open list\r\n        if(!tempOpen.includes(index)) {     \r\n            tempOpen.push(index);\r\n        } else {\r\n            //if clicked index is open, remove it from open list\r\n            tempOpen = tempOpen.filter( (value) => {\r\n                return value !== index;\r\n            })\r\n        }\r\n        //set new state of open indexes\r\n        this.setState({\r\n            openEntries: tempOpen\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"innerWrapper stats\">\r\n                <h2>Info Summary:</h2>\r\n                <p>Students: {this.state.numStudents}</p>\r\n                <p>Classes: {this.state.classes.length}</p>\r\n                <Tabs>\r\n                    <label className=\"visuallyHidden\">Use left and right arrow keys to navigate the menu</label>\r\n                    <TabList>\r\n                        <Tab>Students</Tab>\r\n                        <Tab>Classes</Tab>\r\n                    </TabList>\r\n\r\n                    <TabPanel>\r\n                        <CSSTransition \r\n                            in={true}\r\n                            appear={true}\r\n                            timeout={900}\r\n                            classNames=\"fade\"\r\n                        >\r\n                            <StatsEnrolled\r\n                                entries={this.state.entries}\r\n                                handleClick={this.handleClick}\r\n                                openEntries={this.state.openEntries}\r\n                            /> \r\n                        </CSSTransition>\r\n                    </TabPanel>\r\n\r\n                    <TabPanel>\r\n                        <CSSTransition \r\n                            in={true}\r\n                            appear={true}\r\n                            timeout={900}\r\n                            classNames=\"fade\"\r\n                        >\r\n                            <StatsClasses \r\n                                classStudents={this.state.classStudents}\r\n                                handleClick={this.handleClick}\r\n                                openEntries={this.state.openEntries}\r\n                            />\r\n                        </CSSTransition>\r\n                    </TabPanel>\r\n            \r\n                </Tabs>\r\n                 \r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Stats;","import React, {Component} from 'react';\r\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport \"react-tabs/style/react-tabs.css\";\r\nimport CreateEntry from './CreateEntry.js';\r\nimport UpdateEntry from './UpdateEntry.js';\r\nimport Stats from './Stats.js';\r\nimport './App.css';\r\n\r\n// ------------------------------------------------------------------\r\n// ---Main app wrapper component. Has no state of it's own-----------\r\n// ------------------------------------------------------------------\r\nclass App extends Component {\r\n\r\n  componentDidMount() {\r\n    //set app title for accessibility\r\n    document.title = \"Class Database\";\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App outerWrapper\">\r\n        <Tabs>\r\n          <label className=\"visuallyHidden\">Use left and right arrow keys to navigate the menu</label>\r\n          <TabList>\r\n            <Tab>Create</Tab>\r\n            <Tab>Update</Tab>\r\n            <Tab>Stats</Tab>\r\n          </TabList>\r\n\r\n          \r\n            <TabPanel>\r\n              <CSSTransition \r\n                in={true}\r\n                appear={true}\r\n                timeout={900}\r\n                classNames=\"fade\"\r\n              >\r\n                <CreateEntry />\r\n              </CSSTransition>\r\n            </TabPanel>\r\n          \r\n          \r\n          <TabPanel>\r\n            <CSSTransition \r\n              in={true}\r\n              appear={true}\r\n              timeout={900}\r\n              classNames=\"fade\"\r\n            >\r\n              <UpdateEntry />\r\n            </CSSTransition>\r\n          </TabPanel>\r\n\r\n          <TabPanel>\r\n            <CSSTransition\r\n              in={true}\r\n              appear={true}\r\n              timeout={900}\r\n              classNames=\"fade\"\r\n            >\r\n              <Stats />\r\n            </CSSTransition>\r\n          </TabPanel>\r\n          \r\n        </Tabs>\r\n      </div>\r\n      \r\n    );\r\n\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}